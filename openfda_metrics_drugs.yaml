steps:
  - dataFrameName: drugs
    # drugs is a ETL process in order to get per chembl_id a list of drug names and target ids
    # this df is the base for further extractions
    sql:
      SELECT
        id as chembl_id,
        transform(
          array_distinct(
            array_union(
              trade_names,
              array_union(array(pref_name), synonyms)
            )
          ),
          ar -> lower(ar)) as drug_names,
        array_distinct(flatten(transform(mechanisms_of_action, m ->
          array_distinct(transform(m.target_components, t -> t.ensembl))))) as target_ids
      FROM drugs_input
  - dataFrameName: drugs_expl_by_name
    # we use the df drugs to generate a list of (chembl_id, drug_name) where
    # the pair chembl_id - drug_name is unique. Although chembl_id can be repeated
    sql:
      SELECT DISTINCT
        D.chembl_id as chembl_id,
        D.drug_name as drug_name
      FROM (
        SELECT
          chembl_id,
          explode(drug_names) as drug_name
        FROM drugs) D
      ORDER BY drug_name
  - dataFrameName: drugs_expl_by_gene
    # we use the df drugs to generate a list of (target_id, drug_name) where
    # the pair target_id - drug_name is unique. Although target_id can be repeated
    sql:
      SELECT DISTINCT
        drug_name,
        target_id
      FROM (
        SELECT
          chembl_id,
          explode(target_ids) as target_id
        FROM drugs)
      INNER JOIN drugs_expl_by_name USING (chembl_id)
      ORDER BY drug_name
  - dataFrameName: fdas_without_bl_by_drug_name_inner_drugs
    # having the dataset of fdas exploded with one drug_name per row we
    # inner join with the curated list of drug names we have in OT drug index
    # this case using drug_name as a way to match the drug by chembl_id
    sql:
      SELECT
        *
      FROM fdas_parquet
      INNER JOIN drugs_expl_by_name USING (drug_name)
  - dataFrameName: cached_uniq_reports
    # just a cached computation of unique counts of reports (total)
    sql:
      SELECT
          count(DISTINCT safetyreportid) as uniq_reports
        FROM fdas_without_bl_by_drug_name_inner_drugs
  - dataFrameName: cached_uniq_reports_by_reactions
    # unique reports grouped by reaction returning a dataset of
    # reaction1 unique_counts and so on  across all dataset
    sql:
      SELECT
          reaction_reactionmeddrapt,
          count(DISTINCT safetyreportid) as uniq_report_ids_by_reaction
        FROM fdas_without_bl_by_drug_name_inner_drugs
        GROUP BY reaction_reactionmeddrapt
  - dataFrameName: cached_uniq_reports_by_drugs
    # unique reports grouped by drug (using chembl_id this time) returning a dataset of
    # chembl_id1 unique_counts and so on  across all dataset
    sql:
      SELECT
        chembl_id,
        count(DISTINCT safetyreportid) as uniq_report_ids_by_drug
      FROM fdas_without_bl_by_drug_name_inner_drugs
      GROUP BY chembl_id
  - dataFrameName: fdas_final
    # the fdas dataset is mostly processed before the required computations
    # just putting all required numbers together
    sql:
      SELECT
        F.*,
        R.uniq_report_ids_by_reaction,
        D.uniq_report_ids_by_drug,
        E.*
      FROM
        fdas_without_bl_by_drug_name_inner_drugs F
        INNER JOIN cached_uniq_reports_by_reactions R USING (reaction_reactionmeddrapt)
        INNER JOIN cached_uniq_reports_by_drugs D USING (chembl_id),
        cached_uniq_reports E
  - dataFrameName: fdas_final_drug_reaction
    # final dataset with the ln(Likelihood-ratio test) represented by llr
    # this is computed per (chembl_id - reaction) pair.
    sql:
      SELECT
        chembl_id,
        reaction_reactionmeddrapt,
        A,
        B,
        C,
        D,
        (A * (ln(A) - ln(A + B))) as aterm,
        (C * (ln(C) - ln(C + D))) as cterm,
        ((A + C) * (ln(A + C) - ln(A + B + C + D))) as acterm,
        ((A * (ln(A) - ln(A + B))) + (C * (ln(C) - ln(C + D))) - ((A + C) * (ln(A + C) - ln(A + B + C + D)))) as llr
      FROM (
        SELECT
          chembl_id,
          reaction_reactionmeddrapt,
          count(DISTINCT safetyreportid) as A,
          first(uniq_report_ids_by_reaction) as B,
          first(uniq_report_ids_by_drug) as C,
          first(uniq_reports) as D
        FROM fdas_final
        GROUP BY
          chembl_id,
          reaction_reactionmeddrapt)
output:
  - dataFrameName: fdas_final_drug_reaction
    outputType: JSON
    outputOptions:
      saveMode: Overwrite
      path: "fdas_drug_reaction.json"